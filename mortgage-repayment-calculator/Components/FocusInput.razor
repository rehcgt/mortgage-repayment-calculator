<div class="mb-3 col">
    <label for="@InputId" class="form-label">@LabelText</label>
    <div class="input-group @FocusClass">
        @if (PutInputTextOnLeft)
        {
            <div class="input-group-text @FocusClass">@Unit</div>
        }
        <input type="text" class="form-control @InputFocusClass" id="@InputId" @oninput="HandleInput" placeholder="@Placeholder" @bind="@DisplayValue" @onfocusin="OnFocusAsync" @onfocusout="OnBlurAsync">
        @if (!PutInputTextOnLeft)
        {
            <div class="input-group-text @FocusClass">@Unit</div>
        }
    </div>
    @if (IsRequired)
    {
        <div class="form-text text-danger">This field is required</div>
    }
</div>

@code {
    [Parameter]
    public string LabelText { get; set; } = "";

    [Parameter]
    public string InputId { get; set; } = "";

    [Parameter]
    public string Placeholder { get; set; } = "";

    [Parameter]
    public string Unit { get; set; } = "";

    [Parameter]
    public double? Value { get; set; }

    [Parameter]
    public bool PutInputTextOnLeft { get; set; } = false;

    [Parameter]
    public EventCallback<double?> ValueChanged { get; set; }

    private string FocusClass { get; set; } = "";
    private string InputFocusClass { get; set; } = "";
    private double? previousValue;
    private bool IsRequired { get; set; } = false;
    private string _displayValue = string.Empty;

    public string DisplayValue
    {
        get => _displayValue;
        set
        {
            if (double.TryParse(value, out var result))
            {
                _displayValue = value;
                Value = result;
                ValueChanged.InvokeAsync(Value);
            }
            else if (string.IsNullOrEmpty(value))
            {
                _displayValue = value;
                Value = null;
                ValueChanged.InvokeAsync(Value);
            }
        }
    }

    private async Task OnFocusAsync()
    {
        FocusClass = "bg-warning";
        InputFocusClass = "border-warning focus-ring focus-ring-warning";
        IsRequired = false;
        await Task.CompletedTask;
    }

    private async Task OnBlurAsync()
    {
        FocusClass = "";
        InputFocusClass = "";
        await Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (ValueChanged.HasDelegate && Value != previousValue)
        {
            previousValue = Value;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        FocusClass = "";
        IsRequired = false;
        var input = e.Value?.ToString();
        DisplayValue = input;
    }

    public void MarkAsDanger()
    {
        FocusClass = "bg-danger text-white";
        InputFocusClass = "border-danger focus-ring focus-ring-danger";
        IsRequired = true;
    }

    public void Reset()
    {
        FocusClass = "";
        InputFocusClass = "";
        DisplayValue = "";
        IsRequired = false;
    }
}
